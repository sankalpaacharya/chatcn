{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "codeblock",
  "type": "registry:component",
  "title": "Code Block",
  "description": "Easy Code Block Component",
  "dependencies": [
    "shiki"
  ],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "path": "components/chatcn/ai/codeblock.tsx",
      "content": "\"use client\";\nimport type { BundledLanguage } from \"shiki\";\nimport { codeToHtml } from \"shiki\";\nimport { Clipboard, Check } from \"lucide-react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\n\ntype Props = {\n  children: string;\n  lang: BundledLanguage;\n  height?: string;\n  className?: string;\n  highlight?: { start: number; end: number };\n  theme?: string;\n};\n\nexport function CodeBlock({\n  children,\n  theme = \"github-dark-default\",\n  lang,\n  height = \"600\",\n  className,\n  highlight,\n}: Props) {\n  const [html, setHtml] = useState<string | null>(null);\n  const [copied, setCopied] = useState(false);\n\n  const generateHtml = useCallback(async () => {\n    if (!children) {\n      setHtml(\"<pre><code></code></pre>\");\n      return;\n    }\n    const out = await codeToHtml(children, {\n      lang,\n      theme,\n      colorReplacements: {\n        \"#0d1117\": \"var(--card)\",\n        \"#ffffff\": \"var(--card)\",\n      },\n      decorations: highlight\n        ? [\n            {\n              start: { line: highlight.start - 1, character: 0 },\n              end: { line: highlight.end, character: 0 },\n              properties: { class: \"bg-muted inline-block\" },\n            },\n          ]\n        : [],\n    });\n    setHtml(out);\n  }, [children, lang, theme, highlight]);\n\n  useEffect(() => {\n    generateHtml();\n  }, [generateHtml]);\n\n  const handleCopy = async () => {\n    await navigator.clipboard.writeText(children);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div\n      className={cn(\n        \"relative rounded-md md:text-xl overflow-auto border bg-card w-full max-w-full shrink\",\n        className\n      )}\n      style={{ height: \"100%\", maxHeight: `${height}px` }}\n    >\n      <div className=\"sticky top-5 flex justify-end -mt-8 mr-5\">\n        <Tooltip>\n          <TooltipTrigger\n            className=\"p-1 rounded-md hover:bg-muted transition\"\n            onClick={handleCopy}\n          >\n            {copied ? <Check size={18} /> : <Clipboard size={18} />}\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>{copied ? \"Copied!\" : \"Copy to Clipboard\"}</p>\n          </TooltipContent>\n        </Tooltip>\n      </div>\n\n      {html == null ? (\n        <div className=\"w-full overflow-x-auto text-sm md:text-base [&>pre]:px-4 [&>pre]:py-4\">\n          <pre className=\"bg-card text-foreground\">\n            <code>\n              {children.split(\"\\n\").map((line, i) => (\n                <span key={i} className=\"line\">\n                  {line}\n                  {\"\\n\"}\n                </span>\n              ))}\n            </code>\n          </pre>\n        </div>\n      ) : (\n        <div\n          className={cn(\n            \"w-full overflow-x-auto md:text-base text-sm [&>pre]:px-4 [&>pre]:py-4\"\n          )}\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}