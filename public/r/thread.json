{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "thread",
  "type": "registry:component",
  "title": "Thread",
  "description": "Thread display component for conversations",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/thread.tsx",
      "content": "\"use client\";\nimport { useState, createContext, useContext } from \"react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Ellipsis } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst ThreadContext = createContext<{\n  open: boolean;\n  setOpen: (v: boolean) => void;\n}>({\n  open: false,\n  setOpen: () => {},\n});\nconst useThreadContext = () => useContext(ThreadContext);\n\ntype ThreadProps = {\n  children: React.ReactNode;\n  className?: string;\n};\nexport function Thread({ children, className }: ThreadProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <ThreadContext.Provider value={{ open, setOpen }}>\n      <div\n        className={cn(\n          \"group px-3 py-2 rounded-md flex gap-2 transition-colors hover:bg-accent items-center justify-between\",\n          open ? \"bg-accent/50\" : \"\",\n          className\n        )}\n      >\n        {children}\n      </div>\n    </ThreadContext.Provider>\n  );\n}\n\nexport function ThreadContent({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return <div className={cn(\"truncate\", className)}>{children}</div>;\n}\n\nexport function ThreadAction({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  return (\n    <DropdownMenuItem className={cn(\"p-2\", className)}>\n      {children}\n    </DropdownMenuItem>\n  );\n}\n\nexport function ThreadActions({\n  children,\n  className,\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  const { open, setOpen } = useThreadContext();\n\n  return (\n    <div\n      className={cn(\n        \"transition-opacity\",\n        open ? \"opacity-100\" : \"opacity-0 group-hover:opacity-100\"\n      )}\n    >\n      <DropdownMenu onOpenChange={setOpen}>\n        <DropdownMenuTrigger asChild>\n          <button\n            className={cn(\"p-1 rounded-md\", open && \"text-accent-foreground\")}\n          >\n            <Ellipsis className=\"size-5\" />\n          </button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          side=\"bottom\"\n          className={cn(\n            \"w-56 p-2 border shadow-sm bg-background/95 backdrop-blur-sm\",\n            className\n          )}\n        >\n          {children}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}