{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-editor",
  "type": "registry:component",
  "title": "Code Editor",
  "description": "Lightweight code editor component",
  "registryDependencies": [],
  "files": [
    {
      "path": "components/chatcn/code-editor.tsx",
      "content": "\"use client\";\nimport React, { createContext, useContext, useRef, useState } from \"react\";\nimport Editor, { EditorProps } from \"@monaco-editor/react\";\nimport {\n  Tooltip,\n  TooltipProvider,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\n\ntype CodeEditorContext = {\n  value: string;\n  language: string;\n  theme: string;\n  isLoading: boolean;\n  disabled?: boolean;\n  setValue: (value: string) => void;\n  setLanguage: (language: string) => void;\n  setTheme: (theme: string) => void;\n  editorRef: React.RefObject<any>;\n  onFormat?: () => void;\n  onExecute?: () => void;\n};\n\nconst CodeEditorContext = createContext<CodeEditorContext>({\n  value: \"\",\n  language: \"javascript\",\n  theme: \"vs-dark\",\n  isLoading: false,\n  setValue: () => {},\n  setLanguage: () => {},\n  setTheme: () => {},\n  disabled: false,\n  editorRef: React.createRef(),\n});\n\nfunction useCodeEditorContext() {\n  const ctx = useContext(CodeEditorContext);\n  if (!ctx) {\n    throw Error(\"useCodeEditorContext must be used within a CodeEditor\");\n  }\n  return ctx;\n}\n\ntype CodeEditAreaProps = {\n  loader?: React.ReactNode;\n  className?: string;\n  height?: string | number;\n  width?: string | number;\n} & Omit<EditorProps, \"value\" | \"onChange\" | \"language\" | \"theme\">;\n\nexport function CodeEditArea({\n  loader,\n  className,\n  height = \"400px\",\n  width = \"100%\",\n  ...props\n}: CodeEditAreaProps) {\n  const { disabled, value, setValue, language, theme, editorRef, isLoading } =\n    useCodeEditorContext();\n\n  const handleEditorDidMount = (editor: any, monaco: any) => {\n    editorRef.current = editor;\n    props.onMount?.(editor, monaco);\n  };\n\n  return (\n    <div className={cn(\"border overflow-hidden\", className)}>\n      <Editor\n        loading={loader}\n        height={height}\n        width={width}\n        language={language}\n        theme={theme}\n        value={value}\n        onChange={(value) => setValue(value || \"\")}\n        onMount={handleEditorDidMount}\n        options={{\n          readOnly: disabled,\n          minimap: { enabled: false },\n          fontSize: 14,\n          lineNumbers: \"on\",\n          roundedSelection: false,\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n          ...props.options,\n        }}\n        {...props}\n      />\n    </div>\n  );\n}\n\ntype CodeEditorActionsProps = React.HTMLAttributes<HTMLDivElement>;\n\nexport function CodeEditorActions({\n  children,\n  className,\n  ...props\n}: CodeEditorActionsProps) {\n  return (\n    <div\n      className={cn(\n        \"flex items-center gap-2 p-2 border-b bg-muted/20\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\ntype CodeEditorActionProps = {\n  className?: string;\n  tooltip: React.ReactNode;\n  children: React.ReactNode;\n  side?: \"top\" | \"bottom\" | \"left\" | \"right\";\n  onClick?: () => void;\n} & React.ComponentProps<typeof Tooltip>;\n\nexport function CodeEditorAction({\n  className,\n  tooltip,\n  children,\n  side = \"top\",\n  onClick,\n  ...props\n}: CodeEditorActionProps) {\n  const { disabled } = useCodeEditorContext();\n\n  return (\n    <Tooltip {...props}>\n      <TooltipTrigger\n        asChild\n        disabled={disabled}\n        onClick={(event) => {\n          event.stopPropagation();\n          onClick?.();\n        }}\n      >\n        <button\n          className={cn(\n            \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors\",\n            \"hover:bg-accent hover:text-accent-foreground\",\n            \"h-8 px-2 py-1\",\n            \"disabled:pointer-events-none disabled:opacity-50\",\n            className\n          )}\n          disabled={disabled}\n        >\n          {children}\n        </button>\n      </TooltipTrigger>\n      <TooltipContent side={side} className={className}>\n        {tooltip}\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n\ntype CodeEditorProps = {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  language?: string;\n  onLanguageChange?: (language: string) => void;\n  theme?: string;\n  onThemeChange?: (theme: string) => void;\n  isLoading?: boolean;\n  disabled?: boolean;\n  children: React.ReactNode;\n  className?: string;\n  onFormat?: () => void;\n  onExecute?: () => void;\n};\n\nexport function CodeEditor({\n  value,\n  onValueChange,\n  language = \"javascript\",\n  onLanguageChange,\n  theme = \"vs-dark\",\n  onThemeChange,\n  isLoading = false,\n  disabled = false,\n  children,\n  className,\n  onFormat,\n  onExecute,\n}: CodeEditorProps) {\n  const [internalValue, setInternalValue] = useState(value || \"\");\n  const [internalLanguage, setInternalLanguage] = useState(language);\n  const [internalTheme, setInternalTheme] = useState(theme);\n  const editorRef = useRef<any>(null);\n\n  function handleValueChange(newValue: string) {\n    setInternalValue(newValue);\n    onValueChange?.(newValue);\n  }\n\n  function handleLanguageChange(newLanguage: string) {\n    setInternalLanguage(newLanguage);\n    onLanguageChange?.(newLanguage);\n  }\n\n  function handleThemeChange(newTheme: string) {\n    setInternalTheme(newTheme);\n    onThemeChange?.(newTheme);\n  }\n\n  function handleFormat() {\n    if (editorRef.current) {\n      editorRef.current.getAction(\"editor.action.formatDocument\").run();\n    }\n    onFormat?.();\n  }\n\n  return (\n    <TooltipProvider>\n      <CodeEditorContext.Provider\n        value={{\n          disabled,\n          isLoading,\n          value: value ?? internalValue,\n          setValue: onValueChange ?? handleValueChange,\n          language: language ?? internalLanguage,\n          setLanguage: onLanguageChange ?? handleLanguageChange,\n          theme: theme ?? internalTheme,\n          setTheme: onThemeChange ?? handleThemeChange,\n          editorRef,\n          onFormat: handleFormat,\n          onExecute,\n        }}\n      >\n        <div\n          className={cn(\n            \"border rounded-lg overflow-hidden bg-background\",\n            className\n          )}\n        >\n          {children}\n        </div>\n      </CodeEditorContext.Provider>\n    </TooltipProvider>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}